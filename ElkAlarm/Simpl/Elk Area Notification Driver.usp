//#SYMBOL_NAME "Elk Notification Driver"

#USER_SIMPLSHARP_LIBRARY "ElkAlarm"
#ENABLE_TRACE

Digital_Input _SKIP_, _SKIP_, _SKIP_, Save_Config, _SKIP_;


Digital_Input _skip_, Area_Notifications, Armed_State_Change, Alarm_State_Change, Zone_Change_When_Armed, Zone_Change_When_Disarmed;
Digital_Input _SKIP_, _SKIP_,_SKIP_, Zone_ArmedNotifications[208], _SKIP_, Zone_DisarmedNotifications[208, 208];


Analog_Input _SKIP_,Select_Device, Select_Area;



Digital_Output  _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _skip_, Area_Notifications_fb, Armed_State_Change_fb, Alarm_State_Change_fb, Zone_Change_When_Armed_fb, Zone_Change_When_Disarmed_fb;
Digital_Output _SKIP_, _SKIP_,_SKIP_, Zone_ArmedNotifications_fb[208], _SKIP_, Zone_DisarmedNotifications_fb[208, 208];

String_Output _SKIP_,_SKIP_,_SKIP_,_SKIP_, Selected_Device, Zone_Name[208,208];


integer_parameter PanelNumber;
String_Parameter FileDirectory[254];
ElkNotificationManagerSimpl myNotificationManager;

integer waitTillStart, selectedArea;
string selectedUserDevice[254];



threadsafe push Save_Config
{
 myNotificationManager.SaveNotificationConfig();     
}


threadsafe Change Select_Device
{
	myNotificationManager.SelectUserDevice(Select_Device);  	
}

threadsafe Change Select_Area
{
	myNotificationManager.SelectNotificationArea(Select_Area);
	selectedArea = Select_Area;
}

threadsafe PUSH Area_Notifications
{
   Area_Notifications_fb = myNotificationManager.PropertyToggle(selectedUserDevice, selectedArea, "AreaNotifications");
}

threadsafe PUSH Armed_State_Change
{
   Armed_State_Change_fb = myNotificationManager.PropertyToggle(selectedUserDevice, selectedArea, "ArmedStateChange");
}

threadsafe PUSH Alarm_State_Change
{
   Alarm_State_Change_fb = myNotificationManager.PropertyToggle(selectedUserDevice, selectedArea, "AlarmStateChange");
}

threadsafe PUSH Zone_Change_When_Armed
{
   Zone_Change_When_Armed_fb = myNotificationManager.PropertyToggle(selectedUserDevice, selectedArea, "ZoneChangeWhenArmed");
}

threadsafe PUSH Zone_Change_When_Disarmed
{
   Zone_Change_When_Disarmed_fb = myNotificationManager.PropertyToggle(selectedUserDevice, selectedArea, "ZoneChangeWhenDisarmed");
}
    
threadsafe PUSH Zone_ArmedNotifications
{
	integer i;
	i = getlastmodifiedarrayindex();
	Zone_ArmedNotifications_fb[i] = myNotificationManager.ToggleZoneProperty(selectedUserDevice, i, "ArmedNotifications");
}

threadsafe PUSH Zone_DisarmedNotifications
{
	integer i;
	i = getlastmodifiedarrayindex();
	Zone_DisarmedNotifications_fb[i] = myNotificationManager.ToggleZoneProperty(selectedUserDevice, i, "DisarmedNotifications");
}


Callback Function onNewUserDeviceChange(string deviceName)
{
	Selected_Device = deviceName;
	selectedUserDevice = deviceName;
}   

eventhandler thisUserDeviceAreaChange(NotificationArea sender, EventArgs args)
{

integer i;
integer armed, disarmed;

Area_Notifications_fb = sender.AreaNotifications;
Armed_State_Change_fb = sender.ArmedStateChange;
Alarm_State_Change_fb = sender.AlarmStateChange;
Zone_Change_When_Armed_fb = sender.ZoneChangeWhenArmed;
Zone_Change_When_Disarmed_fb = sender.ZoneChangeWhenDisarmed;

for(i = 1 to 208)
{
	Zone_Name[i] = myNotificationManager.myNotificationZoneArray[i].ZoneName;
	Zone_DisarmedNotifications_fb[i]= myNotificationManager.myNotificationZoneArray[i].DisarmedNotifications;
	Zone_ArmedNotifications_fb[i]= myNotificationManager.myNotificationZoneArray[i].ArmedNotifications;

}


}





Function Main()
{
	
	WaitForInitializationComplete();
	

	RegisterDelegate(myNotificationManager, newUserDeviceChange, onNewUserDeviceChange);  
	RegisterEvent(myNotificationManager, OnUserDeviceAreaChange, thisUserDeviceAreaChange);
	myNotificationManager.Initialize(PanelNumber);    
   selectedArea = 1;
	waitTillStart = 1;
	
}
